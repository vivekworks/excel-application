package model.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 04 20:39:56 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExcelImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Col1 {
            public Object get(ExcelImpl obj) {
                return obj.getCol1();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol1((String)value);
            }
        }
        ,
        Col2 {
            public Object get(ExcelImpl obj) {
                return obj.getCol2();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol2((String)value);
            }
        }
        ,
        Col3 {
            public Object get(ExcelImpl obj) {
                return obj.getCol3();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol3((String)value);
            }
        }
        ,
        RowID {
            public Object get(ExcelImpl obj) {
                return obj.getRowID();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SortOrder {
            public Object get(ExcelImpl obj) {
                return obj.getSortOrder();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setSortOrder((Integer)value);
            }
        }
        ,
        Col4 {
            public Object get(ExcelImpl obj) {
                return obj.getCol4();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol4((String)value);
            }
        }
        ,
        Col5 {
            public Object get(ExcelImpl obj) {
                return obj.getCol5();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol5((String)value);
            }
        }
        ,
        Col6 {
            public Object get(ExcelImpl obj) {
                return obj.getCol6();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol6((String)value);
            }
        }
        ,
        Col7 {
            public Object get(ExcelImpl obj) {
                return obj.getCol7();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol7((String)value);
            }
        }
        ,
        Col8 {
            public Object get(ExcelImpl obj) {
                return obj.getCol8();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol8((String)value);
            }
        }
        ,
        Col9 {
            public Object get(ExcelImpl obj) {
                return obj.getCol9();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol9((String)value);
            }
        }
        ,
        Col10 {
            public Object get(ExcelImpl obj) {
                return obj.getCol10();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol10((String)value);
            }
        }
        ,
        Col11 {
            public Object get(ExcelImpl obj) {
                return obj.getCol11();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol11((String)value);
            }
        }
        ,
        Col12 {
            public Object get(ExcelImpl obj) {
                return obj.getCol12();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol12((String)value);
            }
        }
        ,
        Col13 {
            public Object get(ExcelImpl obj) {
                return obj.getCol13();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol13((String)value);
            }
        }
        ,
        Col14 {
            public Object get(ExcelImpl obj) {
                return obj.getCol14();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol14((String)value);
            }
        }
        ,
        Col15 {
            public Object get(ExcelImpl obj) {
                return obj.getCol15();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol15((String)value);
            }
        }
        ,
        Col16 {
            public Object get(ExcelImpl obj) {
                return obj.getCol16();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setCol16((String)value);
            }
        }
        ,
        Color {
            public Object get(ExcelImpl obj) {
                return obj.getColor();
            }

            public void put(ExcelImpl obj, Object value) {
                obj.setColor((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ExcelImpl object);

        public abstract void put(ExcelImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int COL1 = AttributesEnum.Col1.index();
    public static final int COL2 = AttributesEnum.Col2.index();
    public static final int COL3 = AttributesEnum.Col3.index();
    public static final int ROWID = AttributesEnum.RowID.index();
    public static final int SORTORDER = AttributesEnum.SortOrder.index();
    public static final int COL4 = AttributesEnum.Col4.index();
    public static final int COL5 = AttributesEnum.Col5.index();
    public static final int COL6 = AttributesEnum.Col6.index();
    public static final int COL7 = AttributesEnum.Col7.index();
    public static final int COL8 = AttributesEnum.Col8.index();
    public static final int COL9 = AttributesEnum.Col9.index();
    public static final int COL10 = AttributesEnum.Col10.index();
    public static final int COL11 = AttributesEnum.Col11.index();
    public static final int COL12 = AttributesEnum.Col12.index();
    public static final int COL13 = AttributesEnum.Col13.index();
    public static final int COL14 = AttributesEnum.Col14.index();
    public static final int COL15 = AttributesEnum.Col15.index();
    public static final int COL16 = AttributesEnum.Col16.index();
    public static final int COLOR = AttributesEnum.Color.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ExcelImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.Excel");
    }

    /**
     * Gets the attribute value for Col1, using the alias name Col1.
     * @return the value of Col1
     */
    public String getCol1() {
        return (String)getAttributeInternal(COL1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col1.
     * @param value value to set the Col1
     */
    public void setCol1(String value) {
        setAttributeInternal(COL1, value);
    }

    /**
     * Gets the attribute value for Col2, using the alias name Col2.
     * @return the value of Col2
     */
    public String getCol2() {
        return (String)getAttributeInternal(COL2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col2.
     * @param value value to set the Col2
     */
    public void setCol2(String value) {
        setAttributeInternal(COL2, value);
    }

    /**
     * Gets the attribute value for Col3, using the alias name Col3.
     * @return the value of Col3
     */
    public String getCol3() {
        return (String)getAttributeInternal(COL3);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col3.
     * @param value value to set the Col3
     */
    public void setCol3(String value) {
        setAttributeInternal(COL3, value);
    }

    /**
     * Gets the attribute value for RowID, using the alias name RowID.
     * @return the value of RowID
     */
    public RowID getRowID() {
        return (RowID)getAttributeInternal(ROWID);
    }

    /**
     * Gets the attribute value for SortOrder, using the alias name SortOrder.
     * @return the value of SortOrder
     */
    public Integer getSortOrder() {
        return (Integer)getAttributeInternal(SORTORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for SortOrder.
     * @param value value to set the SortOrder
     */
    public void setSortOrder(Integer value) {
        setAttributeInternal(SORTORDER, value);
    }

    /**
     * Gets the attribute value for Col4, using the alias name Col4.
     * @return the value of Col4
     */
    public String getCol4() {
        return (String)getAttributeInternal(COL4);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col4.
     * @param value value to set the Col4
     */
    public void setCol4(String value) {
        setAttributeInternal(COL4, value);
    }

    /**
     * Gets the attribute value for Col5, using the alias name Col5.
     * @return the value of Col5
     */
    public String getCol5() {
        return (String)getAttributeInternal(COL5);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col5.
     * @param value value to set the Col5
     */
    public void setCol5(String value) {
        setAttributeInternal(COL5, value);
    }

    /**
     * Gets the attribute value for Col6, using the alias name Col6.
     * @return the value of Col6
     */
    public String getCol6() {
        return (String)getAttributeInternal(COL6);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col6.
     * @param value value to set the Col6
     */
    public void setCol6(String value) {
        setAttributeInternal(COL6, value);
    }

    /**
     * Gets the attribute value for Col7, using the alias name Col7.
     * @return the value of Col7
     */
    public String getCol7() {
        return (String)getAttributeInternal(COL7);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col7.
     * @param value value to set the Col7
     */
    public void setCol7(String value) {
        setAttributeInternal(COL7, value);
    }

    /**
     * Gets the attribute value for Col8, using the alias name Col8.
     * @return the value of Col8
     */
    public String getCol8() {
        return (String)getAttributeInternal(COL8);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col8.
     * @param value value to set the Col8
     */
    public void setCol8(String value) {
        setAttributeInternal(COL8, value);
    }

    /**
     * Gets the attribute value for Col9, using the alias name Col9.
     * @return the value of Col9
     */
    public String getCol9() {
        return (String)getAttributeInternal(COL9);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col9.
     * @param value value to set the Col9
     */
    public void setCol9(String value) {
        setAttributeInternal(COL9, value);
    }

    /**
     * Gets the attribute value for Col10, using the alias name Col10.
     * @return the value of Col10
     */
    public String getCol10() {
        return (String)getAttributeInternal(COL10);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col10.
     * @param value value to set the Col10
     */
    public void setCol10(String value) {
        setAttributeInternal(COL10, value);
    }

    /**
     * Gets the attribute value for Col11, using the alias name Col11.
     * @return the value of Col11
     */
    public String getCol11() {
        return (String)getAttributeInternal(COL11);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col11.
     * @param value value to set the Col11
     */
    public void setCol11(String value) {
        setAttributeInternal(COL11, value);
    }

    /**
     * Gets the attribute value for Col12, using the alias name Col12.
     * @return the value of Col12
     */
    public String getCol12() {
        return (String)getAttributeInternal(COL12);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col12.
     * @param value value to set the Col12
     */
    public void setCol12(String value) {
        setAttributeInternal(COL12, value);
    }

    /**
     * Gets the attribute value for Col13, using the alias name Col13.
     * @return the value of Col13
     */
    public String getCol13() {
        return (String)getAttributeInternal(COL13);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col13.
     * @param value value to set the Col13
     */
    public void setCol13(String value) {
        setAttributeInternal(COL13, value);
    }

    /**
     * Gets the attribute value for Col14, using the alias name Col14.
     * @return the value of Col14
     */
    public String getCol14() {
        return (String)getAttributeInternal(COL14);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col14.
     * @param value value to set the Col14
     */
    public void setCol14(String value) {
        setAttributeInternal(COL14, value);
    }

    /**
     * Gets the attribute value for Col15, using the alias name Col15.
     * @return the value of Col15
     */
    public String getCol15() {
        return (String)getAttributeInternal(COL15);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col15.
     * @param value value to set the Col15
     */
    public void setCol15(String value) {
        setAttributeInternal(COL15, value);
    }

    /**
     * Gets the attribute value for Col16, using the alias name Col16.
     * @return the value of Col16
     */
    public String getCol16() {
        return (String)getAttributeInternal(COL16);
    }

    /**
     * Sets <code>value</code> as the attribute value for Col16.
     * @param value value to set the Col16
     */
    public void setCol16(String value) {
        setAttributeInternal(COL16, value);
    }

    /**
     * Gets the attribute value for Color, using the alias name Color.
     * @return the value of Color
     */
    public String getColor() {
        return (String)getAttributeInternal(COLOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Color.
     * @param value value to set the Color
     */
    public void setColor(String value) {
        setAttributeInternal(COLOR, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
